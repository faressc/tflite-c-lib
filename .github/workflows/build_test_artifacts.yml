name: TensorFlow Lite C Library Build

on:
  workflow_dispatch: # lets you run a build from github.com
  # Runs the workflow on push events but only for the develop branch
  push:
    branches:
      - main
    # This is needed otherwise the github.ref is not set with ref/tags/v...
    tags:
      - 'v*.*.*'

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  LIBRARY_NAME: tensorflowlite_c-2.14.0
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # Use up to 4 cpus to build juceaide, etc
  CMAKE_BUILD_PARALLEL_LEVEL: 4 
  # Name of the build directory
  BUILD_DIR: tflite_build

jobs:

  cmake-build:
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - os: macOS-latest
            name: macOS-x86_64
            ccache: ccache
          - os: macOS-latest
            name: macOS-arm64
            ccache: ccache
          - os: windows-latest
            name: Windows
            ccache: sccache
          - name: Linux
            os: ubuntu-latest
            ccache: ccache
    
    runs-on: ${{ matrix.os }}
    steps:
      
      #A simple printout of the matrix
      - name: printout
        shell: bash
        run: |
          echo ${{ github.ref }}
          echo "matrix.name=${{ matrix.name }}";
          echo "matrix.os=${{ matrix.os }}";
          echo "matrix.ccache=${{ matrix.ccache }}";

      # We need the osxutils to get the codesign and notorization tools
      # We need to install ccache here for Windows to grab the right version
      - name: install deps
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "macOS-latest" ]; then
            brew install osxutils
          elif [ "${{ matrix.name }}" == "Windows" ]; then
            choco install ccache
          elif [ "${{ matrix.name }}" == "Linux" ]; then
            sudo apt-get update
          else
            echo "Unknown OS";
          fi;

      # With this we checkout to our repo
      - name: get repo and submodules
        uses: actions/checkout@v3
      # Here we get the submodules like juce
        with:
          submodules: true      
      
      # Using the ccache action to store the build cache and speed up the next builds
      - name: ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: v3-${{ matrix.name }}-${{ env.BUILD_TYPE }}
          variant: ${{ matrix.ccache }}
      
      # Typical cmake configuration with default generator
      - name: cmake configure
        shell: bash
        run: |
          mkdir ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          if [ "${{ matrix.name }}" == "macOS-x86_64" ]; then
            cmake ../tensorflow_src/tensorflow/lite/c -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_OSX_ARCHITECTURES=x86_64
          elif [ "${{ matrix.name }}" == "macOS-arm64" ]; then
            cmake ../tensorflow_src/tensorflow/lite/c -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_OSX_ARCHITECTURES=arm64
          else
            cmake ../tensorflow_src/tensorflow/lite/c -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache }}
          fi;

      # Build the project
      - name: cmake build
        shell: bash
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}
      
      # Declaring the product name and the packaging directory
      - name: declare artefact variables
        shell: bash
        run: |
          echo "PACKAGE_DIR=artefacts/${{ env.LIBRARY_NAME }}-${{ matrix.name}}" >> $GITHUB_ENV
          echo "PRODUCT_NAME=${{ env.LIBRARY_NAME }}-${{ matrix.name }}" >> $GITHUB_ENV
      
      # Moving the artefacts to a packaging directory
      - name: move artefacts
        shell: bash
        run: |
          mkdir -p ${{ env.PACKAGE_DIR }}
          mkdir -p ${{ env.PACKAGE_DIR }}/include
          mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow
          mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow/lite
          mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core
          mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c
          mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async
          mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async/c
          mkdir -p ${{ env.PACKAGE_DIR }}/lib

          mv "tensorflow_src/tensorflow/lite/c/c_api.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
          mv "tensorflow_src/tensorflow/lite/c/c_api_experimental.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
          mv "tensorflow_src/tensorflow/lite/c/c_api_types.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
          mv "tensorflow_src/tensorflow/lite/c/common.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
          mv "tensorflow_src/tensorflow/lite/builtin_ops.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
          mv "tensorflow_src/tensorflow/lite/core/c/builtin_op_data.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c;
          mv "tensorflow_src/tensorflow/lite/core/c/c_api_experimental.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c;
          mv "tensorflow_src/tensorflow/lite/core/c/c_api_opaque.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c;
          mv "tensorflow_src/tensorflow/lite/core/c/common.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c;
          mv "tensorflow_src/tensorflow/lite/core/c/c_api_types.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c;
          mv "tensorflow_src/tensorflow/lite/core/c/c_api.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c;
          mv "tensorflow_src/tensorflow/lite/core/c/registration_external.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c;
          mv "tensorflow_src/tensorflow/lite/core/async/c/async_kernel.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async/c;
          mv "tensorflow_src/tensorflow/lite/core/async/c/async_signature_runner.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async/c;
          mv "tensorflow_src/tensorflow/lite/core/async/c/internal.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async/c;
          mv "tensorflow_src/tensorflow/lite/core/async/c/task.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async/c;
          mv "tensorflow_src/tensorflow/lite/core/async/c/types.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async/c;
          
          if [ "${{ matrix.os }}" == "macOS-latest" ]; then
            mv "${{ env.BUILD_DIR }}/libtensorflowlite_c.dylib" ${{ env.PACKAGE_DIR }}/lib;
          elif [ "${{ matrix.name }}" == "Windows" ]; then
            mv "${{ env.BUILD_DIR }}/${{ env.BUILD_TYPE }}/tensorflowlite_c.dll" ${{ env.PACKAGE_DIR }}/lib;
          elif [ "${{ matrix.name }}" == "Linux" ]; then
            mv "${{ env.BUILD_DIR }}/libtensorflowlite_c.so" ${{ env.PACKAGE_DIR }}/lib;
          else
            echo "Unknown OS";
          fi;

      # We need to import the apple developer certificate so that we can codesign our binaries
      - name: import certificates (macOS)
        uses: apple-actions/import-codesign-certs@v2
        if: ${{ matrix.os == 'macOS-latest' }}
        with:
          # GitHub encrypted secrets
          p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
          p12-password: ${{ secrets.DEV_ID_APP_PWD }}

      # Codesigning all the binaries
      - name: codesign (macOS)
        if: ${{ matrix.os == 'macOS-latest' }}
        run: |
          codesign --force -s "${{ secrets.DEV_ID_APP }}" -v "${{ env.PACKAGE_DIR }}/lib/libtensorflowlite_c.dylib" --deep --strict --options=runtime --timestamp;
          # Here we check the code signitures
          codesign -dv --verbose=4 "${{ env.PACKAGE_DIR }}/lib/libtensorflowlite_c.dylib";

      # Zip the artefact
      - name: zip artefacts
        working-directory: ${{github.workspace}}/artefacts
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "macOS-latest" ]; then
            zip -vr ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/ -x "*.DS_Store"
          elif [ "${{ matrix.name }}" == "Windows" ]; then
            tar -a -c -f ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/
          elif [ "${{ matrix.name }}" == "Linux" ]; then
            zip -r ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/
          else
            echo "Unknown OS";
          fi;

      # Let's now notarize the zip file and with it all its contents / binaries
      - name: notarize (macOS)
        working-directory: ${{github.workspace}}/artefacts
        if: ${{ matrix.os == 'macOS-latest' }}
        run: |
          # In contrast to dmg files zip files do not need to be codesigned before notarization
          xcrun notarytool submit ${{ env.PRODUCT_NAME }}.zip --apple-id ${{ secrets.APPLE_DEV_ID }} --password ${{ secrets.APPLE_DEV_PWD }} --team-id ${{ secrets.TEAM_ID }} --wait
          # Then we need to unzip it and staple the ticket for the gatekeeper to all binaries
          unzip ${{ env.PRODUCT_NAME }}.zip && rm ${{ env.PRODUCT_NAME }}.zip
          # And finally zip it again
          zip -vr ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/ -x "*.DS_Store"
          
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}.zip
          path: artefacts/${{ env.PRODUCT_NAME }}.zip

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: cmake-build

    steps:
    - name: Get Artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          */*.zip