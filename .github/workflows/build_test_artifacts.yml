name: TensorFlow Lite C Library Build

on:
    workflow_dispatch: # lets you run a build from github.com
    # Runs the workflow on push events but only for the develop branch
    push:
        branches:
            - main
        # This is needed otherwise the github.ref is not set with ref/tags/v...
        tags:
            - 'v*.*.*'

# When pushing new commits, cancel any running builds on that branch
concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true

env:
    LIBRARY_NAME: tensorflowlite_c-2.17.0
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Release
    # Use up to 4 cpus to build juceaide, etc
    CMAKE_BUILD_PARALLEL_LEVEL: 4 
    # Name of the build directory
    BUILD_DIR: tflite-build

jobs:

    cmake-build:
        name: ${{ matrix.name }}
        strategy:
            fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
            matrix:
                include:
                    -   name: Linux-x86_64
                        os: ubuntu-latest
                    -   name: macOS-x86_64
                        os: macOS-latest
                    -   name: macOS-arm64
                        os: macOS-latest
                    -   name: Windows-x86_64
                        os: windows-latest
        
        runs-on: ${{ matrix.os }}
        steps:
            
            #A simple printout of the matrix
            -   name: printout
                shell: bash
                run: |
                    echo ${{ github.ref }}
                    echo "matrix.name=${{ matrix.name }}";
                    echo "matrix.os=${{ matrix.os }}";
                    echo "matrix.ccache=${{ matrix.ccache }}";

            # We need the osxutils to get the codesign and notorization tools
            -   name: install deps
                shell: bash
                run: |
                    if [ "${{ matrix.name }}" == "Linux-x86_64" ]; then
                            sudo apt-get update && sudo apt install ninja-build
                    elif [ "${{ matrix.name }}" == "macOS-x86_64" ]; then
                            brew install osxutils ninja
                            echo "brew prefix: $(brew --prefix)"
                            git clone https://github.com/intel/ARM_NEON_2_x86_SSE.git

                    elif [ "${{ matrix.name }}" == "macOS-arm64" ]; then
                            brew install osxutils ninja
                            echo "brew prefix: $(brew --prefix)"
                    elif [ "${{ matrix.name }}" == "Windows-x86_64" ]; then
                            choco install ninja
                    else
                            echo "Unknown OS";
                    fi;

            # With this we checkout to our repo
            -   name: get repo and submodules
                uses: actions/checkout@v4
                with:
                    submodules: true

            # We cache the build to speed up the build process
            -   name: cache the build
                uses: mozilla-actions/sccache-action@v0.0.5
            
            # Typical cmake configuration with default generator
            -   name: cmake configure
                shell: bash
                run: |
                    mkdir ${{ env.BUILD_DIR }}
                    cd ${{ env.BUILD_DIR }}
                    if [ "${{ matrix.name }}" == "macOS-x86_64" ]; then
                        cmake ../tensorflow/tensorflow/lite/c -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES=../ARM_NEON_2_x86_SSE
                    elif [ "${{ matrix.name }}" == "macOS-arm64" ]; then
                        cmake ../tensorflow/tensorflow/lite/c -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_OSX_ARCHITECTURES=arm64
                    elif [ "${{ matrix.name }}" == "Windows" ]; then
                        cmake ../tensorflow/tensorflow/lite/c -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=True -DCMAKE_CXX_STANDARD=20
                    else
                        cmake ../tensorflow/tensorflow/lite/c -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
                    fi;

            # Build the project
            -   name: cmake build
                shell: bash
                run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}
            
            # Declaring the product name and the packaging directory
            -   name: declare artefact variables
                shell: bash
                run: |
                    echo "PACKAGE_DIR=artefacts/${{ env.LIBRARY_NAME }}-${{ matrix.name}}" >> $GITHUB_ENV
                    echo "PRODUCT_NAME=${{ env.LIBRARY_NAME }}-${{ matrix.name }}" >> $GITHUB_ENV
            
            # Moving the artefacts to a packaging directory
            -   name: move artefacts
                shell: bash
                run: |
                    mkdir -p ${{ env.PACKAGE_DIR }}
                    mkdir -p ${{ env.PACKAGE_DIR }}/include
                    mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow/lite
                    mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c
                    mkdir -p ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async/c
                    mkdir -p ${{ env.PACKAGE_DIR }}/lib

                    mv "tensorflow/tensorflow/lite/c/c_api.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
                    mv "tensorflow/tensorflow/lite/c/c_api_experimental.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
                    mv "tensorflow/tensorflow/lite/c/c_api_types.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
                    mv "tensorflow/tensorflow/lite/c/common.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
                    mv "tensorflow/tensorflow/lite/builtin_ops.h" ${{ env.PACKAGE_DIR }}/include/tensorflow/lite;
                    # When using wildcards with bash, we cannot use quotes
                    cp tensorflow/tensorflow/lite/core/c/*.h ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/c;
                    cp tensorflow/tensorflow/lite/core/async/c/*.h ${{ env.PACKAGE_DIR }}/include/tensorflow/lite/core/async/c;
                    
                    if [ "${{ matrix.name }}" == "Linux-x86_64" ]; then
                        mv "${{ env.BUILD_DIR }}/libtensorflowlite_c.so" ${{ env.PACKAGE_DIR }}/lib;
                    elif [ "${{ matrix.os }}" == "macOS-latest" ]; then
                        mv "${{ env.BUILD_DIR }}/libtensorflowlite_c.dylib" ${{ env.PACKAGE_DIR }}/lib;
                    elif [ "${{ matrix.name }}" == "Windows" ]; then
                        mv "${{ env.BUILD_DIR }}/${{ env.BUILD_TYPE }}/tensorflowlite_c.dll" ${{ env.PACKAGE_DIR }}/lib;
                        mv "${{ env.BUILD_DIR }}/${{ env.BUILD_TYPE }}/tensorflowlite_c.exp" ${{ env.PACKAGE_DIR }}/lib;
                        mv "${{ env.BUILD_DIR }}/${{ env.BUILD_TYPE }}/tensorflowlite_c.lib" ${{ env.PACKAGE_DIR }}/lib;
                    else
                        echo "Unknown OS";
                    fi;

            # We need to import the apple developer certificate so that we can codesign our binaries
            -   name: import certificates (macOS)
                uses: apple-actions/import-codesign-certs@v3
                if: ${{ matrix.os == 'macOS-latest' }}
                with:
                    # GitHub encrypted secrets
                    p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
                    p12-password: ${{ secrets.DEV_ID_APP_PWD }}

            # Codesigning all the binaries
            -   name: codesign (macOS)
                if: ${{ matrix.os == 'macOS-latest' }}
                run: |
                    codesign --force -s "${{ secrets.DEV_ID_APP }}" -v "${{ env.PACKAGE_DIR }}/lib/libtensorflowlite_c.dylib" --deep --strict --options=runtime --timestamp;
                    # Here we check the code signitures
                    codesign -dv --verbose=4 "${{ env.PACKAGE_DIR }}/lib/libtensorflowlite_c.dylib";

            # Zip the artefact
            -   name: zip artefacts
                working-directory: ${{github.workspace}}/artefacts
                shell: bash
                run: |
                    if [ "${{ matrix.name }}" == "Linux-x86_64" ]; then
                        zip -r ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/
                    elif [ "${{ matrix.os }}" == "macOS-latest" ]; then
                        zip -vr ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/ -x "*.DS_Store"
                    elif [ "${{ matrix.name }}" == "Windows-x86_64" ]; then
                        pwsh -command "Compress-Archive -Path '${{ env.PRODUCT_NAME }}/' -DestinationPath '${{ env.PRODUCT_NAME }}.zip'"
                    else
                        echo "Unknown OS";
                    fi;
                    
            -   name: upload artifact
                uses: actions/upload-artifact@v4
                with:
                    name: ${{ env.PRODUCT_NAME }}.zip
                    path: ${{ env.PACKAGE_DIR }}.zip

    release:
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest
        needs: cmake-build

        steps:
        -   name: Get Artifacts
            uses: actions/download-artifact@v4

        -   name: Create Release
            uses: softprops/action-gh-release@v2
            with:
                prerelease: true
                files: |
                    */*.zip
